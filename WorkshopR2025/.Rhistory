quarto publish quaro-pub regresi.qmd
# Import data
datasem <- read.csv('data/data_sem.csv')
head(datasem)
head(datapls)
# Import data
# install.packages("readxl")
library(readxl)
datapls <- read_excel('data/data_pls_sem.xlsx')
head(datapls)
str(datapls)
str(datasem)
myModel <- '
# latent variables
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual covariances
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8
'
fit <- sem(model = myModel,
data = PoliticalDemocracy)
library(lavaan)
myModel <- '
# latent variables
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual covariances
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8
'
fit <- sem(model = myModel,
data = PoliticalDemocracy)
summary(fit)
myModel <- '
# latent variables
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8
'
semPaths(fit, what = 'std', layout = 'tree', edge.label.cex=.9, curvePivot = TRUE)
library(semPlot)
install.packages("semPlot")
semPaths(myModel)
library(semPlot)
semPaths(myModel)
semPaths(myModel)
semPaths(myModel, whatLabels = "est",
edge.label.cex=.9, curvePivot = TRUE)
semPaths(myModel
semPaths(myModel
semPaths(fit, what = 'std', layout = 'tree', edge.label.cex=.9, curvePivot = TRUE)
semPaths(fit)
semPaths(fit, what = 'std', layout = 'tree', edge.label.cex=.9, curvePivot = TRUE)
```{r}
summary(fit, standardized=TRUE)
ggcorr(PoliticalDemocracy,
nbreaks = 6,
label = T, low = "red3", high = "green3",
label_round = 2, name = "Correlation Scale", label_alpha = T, hjust = 0.75) +
ggtitle(label = "Correlation Plot") +
theme(plot.title = element_text(hjust = 0.6)) #move the title to the middle
library(ggplot2)
ggcorr(PoliticalDemocracy,
nbreaks = 6,
label = T, low = "red3", high = "green3",
label_round = 2, name = "Correlation Scale", label_alpha = T, hjust = 0.75) +
ggtitle(label = "Correlation Plot") +
theme(plot.title = element_text(hjust = 0.6)) #move the title to the middle
library(ggcorrplot)
install.packages("ggcorrplot")
library(ggcorrplot)
ggcorr(PoliticalDemocracy,
nbreaks = 6,
label = T, low = "red3", high = "green3",
label_round = 2, name = "Correlation Scale", label_alpha = T, hjust = 0.75) +
ggtitle(label = "Correlation Plot") +
theme(plot.title = element_text(hjust = 0.6))
library(ggcorrplot)
cor(PoliticalDemocracy)
round(cor(PoliticalDemocracy),2)
round(cor(PoliticalDemocracy),2)
**Catatan**
pi
library(semPlot)
semPaths(fit)
semPaths(fit, what = 'std', layout = 'tree', edge.label.cex=.9, curvePivot = TRUE)
semPaths(fit, what = 'std')
semPaths(fit, what = 'std', layout = 'tree', edge.label.cex=.9, curvePivot = TRUE)
semPaths(fit, what = 'std', layout = 'tree', edge.label.cex=.9)
, curvePivot =
semPaths(fit, what = 'std', edge.label.cex=.9, curvePivot = TRUE)
summary(fit, standardized=TRUE)
summary(fit, standardized=TRUE, fit.measures=TRUE)
summary(fit, standardized=TRUE)
summary(fit, standardized=TRUE, fit.measures=TRUE)
summary(fit, standardized=TRUETRUE)
summary(fit, standardized=TRUETRUE)
summary(fit, standardized=TRUE)
fitMeasures(fit)
library(readxl)
datapls <- read_excel('data/data_pls_sem.xlsx')
head(datapls)
str(datapls)
fit2 <- sem(model = sem.model, data = datapls)
# Spesifikasi Model
sem.model = "
faktor =~ A1 + A2 + A3 + A4
permintaan =~ B1 + B2
industri =~ C1 + C2
strategi =~ D1 + D2 + D3 + D4
regulasi =~ E1 + E2 + E3 + E4 + E5 + E6
kesempatan =~ F1 + F2 + F3 + F4
kesempatan ~ faktor + permintaan + industri + strategi + regulasi"
fit2 <- sem(model = sem.model, data = datapls)
library(semPlot)
semPaths(fit2)
?sem
# Spesifikasi Model
library(plspm)
install.packages("plspm")
# Spesifikasi Model
library(plspm)
# Spesifikasi Model
library(plspm)
model_path <- rbind(fkt, prm, ind, str, rgl, ksm)
# Spesifikasi Model
library(plspm)
fkt <- c(0, 0, 0, 0, 0, 0, 0, 0, 0)
prm <- c(0, 0, 0, 0, 0, 0, 0, 0, 0)
ind <- c(0, 0, 0, 0, 0, 0, 0, 0, 0)
str <- c(0, 0, 0, 0, 0, 0, 0, 0, 0)
rgl <- c(0, 0, 0, 0, 0, 0, 0, 0, 0)
ksm <- c(1, 1, 1, 1, 1, 1, 1, 1, 0)
model_path <- rbind(fkt, prm, ind, str, rgl, ksm)
colnames(model_path) <- rownames(model_path)
# Spesifikasi Model
library(plspm)
fkt <- c(0, 0, 0, 0, 0, 0, 0)
prm <- c(0, 0, 0, 0, 0, 0, 0)
ind <- c(0, 0, 0, 0, 0, 0, 0)
str <- c(0, 0, 0, 0, 0, 0, 0)
rgl <- c(0, 0, 0, 0, 0, 0, 0)
ksm <- c(1, 1, 1, 1, 1, 1, 0)
model_path <- rbind(fkt, prm, ind, str, rgl, ksm)
colnames(model_path) <- rownames(model_path)
model_path
rownames(model_path)
colnames(model_path)
model_path
fkt <- c(0, 0, 0, 0, 0, 0, 0)
fkt
model_path <- data.frame(rbind(fkt, prm, ind, str, rgl, ksm))
model_path
colnames(model_path) <- rownames(model_path)
model_path
# graph structural model
innerplot(model_path)
# graph structural model
innerplot(model_path)
# Spesifikasi Model
library(plspm)
fkt <- c(0, 0, 0, 0, 0, 0, 0)
prm <- c(0, 0, 0, 0, 0, 0, 0)
ind <- c(0, 0, 0, 0, 0, 0, 0)
str <- c(0, 0, 0, 0, 0, 0, 0)
rgl <- c(0, 0, 0, 0, 0, 0, 0)
ksm <- c(1, 1, 1, 1, 1, 1, 0)
model_path <- data.frame(rbind(fkt, prm, ind, str, rgl, ksm))
colnames(model_path) <- rownames(model_path)
model_path <- as.matrix(model_path)
model_path
# graph structural model
innerplot(model_path)
# Spesifikasi Model
library(plspm)
fkt <- c(0, 0, 0, 0, 0, 0)
prm <- c(0, 0, 0, 0, 0, 0)
ind <- c(0, 0, 0, 0, 0, 0)
str <- c(0, 0, 0, 0, 0, 0)
rgl <- c(0, 0, 0, 0, 0, 0)
ksm <- c(1, 1, 1, 1, 1, 0)
model_path <- data.frame(rbind(fkt, prm, ind, str, rgl, ksm))
colnames(model_path) <- rownames(model_path)
model_path <- as.matrix(model_path)
model_path
# graph structural model
innerplot(model_path)
datapls
str(datapls)
data.frame(str(datapls))
colnames(datapls)
str(datapls)
colnames(datapls)
# define latent variable associated with
model_blocks <- list(4:11, 13:14, 16:17, 19:22, 24:35, 37:44)
# vector of modes (reflective)
#model_modes <- c("A", "A", "A")
#, modes = model_modes
# run plspm analysis
model_pls <- plspm(Data = datapls, path_matrix = model_path, blocks = model_blocks)
model_pls
summary(model_pls)
# define latent variable associated with
model_blocks <- list(4:11, 13:14, 16:17, 19:22, 24:35, 37:44)
# run plspm analysis
model_pls <- plspm(Data = datapls, path_matrix = model_path, blocks = model_blocks)
model_pls
plot(model_pls, what = "loadings")
# Loadings and Communilaties
model_pls$outer_model
# Coefficient of Determination
model_pls$inner_model
# Coefficient of Determination
round(model_pls$inner_model,2)
# Coefficient of Determination
round(data.frame(model_pls$inner_model,2))
# Coefficient of Determination
model_pls$inner_model
round(model_pls$inner_model, 2)
# Coefficient of Determination
model_pls$inner_model
data.frame(model_pls$inner_model)
# Round for all column
round(model_pls$inner_model, 2)
dt <- data.frame(model_pls$inner_model)
lapply(dt, function (x) {round(x, 2)})
# Coefficient of Determination
dt <- data.frame(model_pls$inner_model)
dt
dt[,1]
# Coefficient of Determination
dt <- data.frame(model_pls$inner_model)
dt[,1] <- round(dt[,1], 2)
dt[,2] <- round(dt[,2], 2)
dt
# Coefficient of Determination
dt <- data.frame(model_pls$inner_model)
dt[,1] <- round(dt[,1], 2)
dt[,2] <- round(dt[,2], 2)
dt[,3] <- round(dt[,3], 2)
dt[,4] <- round(dt[,4], 2)
# Coefficient of Determination
dt <- data.frame(model_pls$inner_model)
dt[,1] <- round(dt[,1], 2)
dt[,2] <- round(dt[,2], 2)
dt[,3] <- round(dt[,3], 2)
dt[,4] <- round(dt[,4], 2)
dt
model_pls
model_pls$inner_summary
# Goodness-of-fit
model_pls$gof
plot(model_pls, what = "inner", colpos = "#6890c4BB", colneg = "#f9675dBB", txt.col = "black", arr.tcol="black")
